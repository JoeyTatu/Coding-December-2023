trunk_cli_version: 1.18.0
title: Check [[on-demand] [gofmt:format:Go\coffee-api\services\coffee.go:HEAD]]
report:
  - linter:
      command: |
        'C:\Users\Joey\AppData\Local\trunk\tools\go\1.20.4-ed8c40f3740dfc6f70b74f8d9067718f/bin\gofmt.exe' 'Go\coffee-api\services\coffee.go'
      stdin_path: |
        C:\Users\Joey\AppData\Local\Temp\trunk\n6hhjzl\Go\coffee-api\services\coffee.go
      run_from: C:\Users\Joey\AppData\Local\Temp\trunk\n6hhjzl\
      timeout: 10m
      rerun: (cd C:\Users\Joey\AppData\Local\Temp\trunk\n6hhjzl\; cat C:\Users\Joey\AppData\Local\Temp\trunk\n6hhjzl\Go\coffee-api\services\coffee.go | env -i 'PATH=C:\Users\Joey\AppData\Local\trunk\tools\go\1.20.4-ed8c40f3740dfc6f70b74f8d9067718f/bin;C:\Users\Joey\AppData\Local\trunk\tools\git-bash\2.40.1-da0c3e1526d36e62bf43d06ec46c5052/bin;C:\Users\Joey\AppData\Local\trunk\tools\git-bash\2.40.1-da0c3e1526d36e62bf43d06ec46c5052/usr/bin' 'C:\Users\Joey\AppData\Local\trunk\tools\go\1.20.4-ed8c40f3740dfc6f70b74f8d9067718f/bin\gofmt.exe' 'Go\coffee-api\services\coffee.go')
      affects_cache:
        []
      direct_configs:
        []
      exit_status: exited
      exit_code: 0
      stdout: |
        package services

        import (
        	"context"
        	"time"
        )

        type Coffee struct {
        	ID        string    `json:"id"`
        	Name      string    `json:"name"`
        	Roast     string    `json:"roast"`
        	Region    string    `json:"region"`
        	Price     float32   `json:"price"`
        	GrindUnit int16     `json:"grind_unit"`
        	CreatedAt time.Time `json:"created_at"`
        	UpdatedAt time.Time `json:"updated_at"`
        }

        func (c *Coffee) GetAllCoffees() ([]*Coffee, error) {
        	ctx, cancel := context.WithTimeout(context.Background(), dbTimeout)
        	defer cancel()

        	query := `SELECT * FROM coffees`

        	rows, err := db.QueryContext(ctx, query)
        	if err != nil {
        		return nil, err
        	}

        	var coffees []*Coffee
        	for rows.Next() {
        		var coffee Coffee
        		err := rows.Scan(
        			&coffee.ID,
        			&coffee.Name,
        			&coffee.Roast,
        			&coffee.Price,
        			&coffee.GrindUnit,
        			&coffee.CreatedAt,
        			&coffee.UpdatedAt,
        		)
        		if err != nil {
        			return nil, err
        		}

        		coffees = append(coffees, &coffee)
        	}
        	return coffees, nil
        }

      stderr: (none)
    parser: |
      (none)